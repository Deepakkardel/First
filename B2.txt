import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score,confusion_matrix
from sklearn.linear_model import LogisticRegression
import seaborn as sns
import matplotlib.pyplot as plt


df=pd.read_csv("C:/heart.csv")
df

df.info()

#Data Cleaning
df = df.drop_duplicates()
df.describe()

df.info()

df.isna().sum()

#Data Integration
df.fbs.unique()

subSet1 = df[['age','cp','chol','thalach']]
subSet2 = df[['exang','slope','target']]
merging=pd.concat([subSet1,subSet2])
merging


#Error Correcting
df.columns


def remove_outliers(column):
    Q1 = column.quantile(0.25)
    Q3 = column.quantile(0.75)
    IQR = Q3 - Q1
    threshold = 1.5 * IQR
    outlier_mask = (column < Q1 - threshold) | (column > Q3 + threshold)
    return column[~outlier_mask]


col_name = ['cp','thalach','exang','oldpeak','slope','ca']
for col in col_name:
    df[col] = remove_outliers(df[col])


plt.figure(figsize=(10, 6))


for col in col_name:
    sns.boxplot(data=df[col])
    plt.title(col)
    plt.show()

df = df.dropna()
df.isna().sum()

df = df.drop('ca',axis=1)
df

correlations = df.corr()['target'].drop('target')
print("Correlation with the Target:")
print(correlations)
print()

plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()


#Data Split
x = df[['cp','thalach','exang','oldpeak','slope','target']]
y = df
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)
x_train.shape,x_test.shape,y_train.shape,y_test.shape


#Data transformation
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)


y_train= np.array(y_train).reshape(-1, 1)
y_test= np.array(y_test).reshape(-1, 1)
y_train.shape


#Data model building
model = LogisticRegression()
model.fit(x_train_scaled,y_train)
y_pred = model.predict(x_test_scaled)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
